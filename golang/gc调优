现在我们来总结一下前面三个例子中的优化情况：    

控制内存分配的速度，限制 goroutine 的数量，从而提高赋值器对 CPU 的利用率。   
减少并复用内存，例如使用 sync.Pool 来复用需要频繁创建临时对象，例如提前分配足够的内存来降低多余的拷贝。   
需要时，增大 GOGC 的值，降低 GC 的运行频率。   
```
package main
import(
"fmt"
"os"
"runtime"
"runtime/trace"
"sync/atomic"
"time"
)
var(
    stop  int32
    count int64
    sum   time.Duration
)
func concat(){
  for n :=0; n <100; n++{
    for i :=0; i <8; i++{
        go func(){
            s :="Go GC"
            s +=" "+"Hello"
            s +=" "+"World"
            _ = s
      }()
    }
  }
}
func main(){
    f, _ := os.Create("trace.out")
    defer f.Close()
    trace.Start(f)
    defer trace.Stop()
    go func(){
      var t time.Time
      for atomic.LoadInt32(&stop)==0{
            t = time.Now()
            runtime.GC()
            sum += time.Since(t)
            count++
      }
      fmt.Printf("GC spend avg: %v\n", time.Duration(int64(sum)/count))
    }()
    concat()
    atomic.StoreInt32(&stop,1)
}
```
trace能看到go的执行时间，网络io时间，阻塞时间，调度时间，gc时间

